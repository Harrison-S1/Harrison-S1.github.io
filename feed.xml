<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Sam's 2nd brain</title><subtitle>A second brain and how to's, mostly linux oriantated.</subtitle> <updated>2023-04-25T13:47:33+00:00</updated> <author> <name>Sam</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Sam </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Atlas project - part two</title><link href="/posts/atlas-project-part-two/" rel="alternate" type="text/html" title="Atlas project - part two" /><published>2023-04-24T14:00:00+00:00</published> <updated>2023-04-25T13:47:09+00:00</updated> <id>/posts/atlas-project-part-two/</id> <content src="/posts/atlas-project-part-two/" /> <author> <name>Sam</name> </author> <category term="aws" /> <category term="howto's" /> <category term="linux" /> <category term="cloud" /> <category term="terraform" /> <category term="docker" /> <summary> OK, so we have our docker image, and we are storing it in the Docker repository. Now what. Well we want to create some cloud infrastructure, so we can deploy our game, but we will be using Terraform to code up our infrastructure. Note, for this, I’m going to use the cloud playground from my subscription to A Cloud Guru. You can use this project on with the AWS free tier account, so if you n... </summary> </entry> <entry><title>Atlas Project - part one</title><link href="/posts/atlas-project-part-one/" rel="alternate" type="text/html" title="Atlas Project - part one" /><published>2023-04-17T14:00:00+00:00</published> <updated>2023-04-18T08:41:38+00:00</updated> <id>/posts/atlas-project-part-one/</id> <content src="/posts/atlas-project-part-one/" /> <author> <name>Sam</name> </author> <category term="aws" /> <category term="howto's" /> <category term="linux" /> <category term="cloud" /> <category term="terraform" /> <category term="docker" /> <summary> Often in tech it is hard to see the wood through the trees and stringing what you know and learned together can be difficult. So here is my mini project to learn more about GitHub actions Terraform Cloud and to brush up on some Docker and Terraform skills. I’ll be walking you though how to deploy a browser based puzzle game called 2048 which by now is a fork, of a fork of a fork, On AWS using ... </summary> </entry> <entry><title>Creating a Storage Gateway in AWS</title><link href="/posts/aws-storage-gateway/" rel="alternate" type="text/html" title="Creating a Storage Gateway in AWS" /><published>2022-12-17T14:00:00+00:00</published> <updated>2022-12-20T15:10:30+00:00</updated> <id>/posts/aws-storage-gateway/</id> <content src="/posts/aws-storage-gateway/" /> <author> <name>Sam</name> </author> <category term="aws" /> <category term="howto's" /> <category term="linux" /> <category term="cloud" /> <category term="terraform" /> <summary> So what is a Storge Gateway? A Storage Gateway it just a way to connect AWS storage in a traditional way e.g. NFS, SMB etc. Lets build one with Terraform A fully working envriment with a Storage Gateway can be found here So a Storage Gateway is built up of the following A instance with a dedicated 150GB cahce drive A role A security group S3 bucket (in this example) S3 policy ... </summary> </entry> <entry><title>CloudWatch Monitor EC2 Linux services and set alarms</title><link href="/posts/CloudWatch-Monitor-EC2-Linux-services-and-set-alarms/" rel="alternate" type="text/html" title="CloudWatch Monitor EC2 Linux services and set alarms" /><published>2022-10-23T14:00:00+00:00</published> <updated>2022-10-25T07:15:51+00:00</updated> <id>/posts/CloudWatch-Monitor-EC2-Linux-services-and-set-alarms/</id> <content src="/posts/CloudWatch-Monitor-EC2-Linux-services-and-set-alarms/" /> <author> <name>Sam</name> </author> <category term="aws" /> <category term="howto's" /> <category term="linux" /> <category term="cloud" /> <category term="cloudwatch" /> <summary> Prerequisite The Amazon CloudWatch agent is installed You have set up a IAM Role for the CloudWatch agent Set up a service to monitor At the moment CloudWatch does not monitor services as we would normally expect a monitoring system to do with a agent, is it up or down. So we need to create the metric ourselves. Systemctl can help us there with: systemctl -q is-active httpd... </summary> </entry> <entry><title>Create a systemd service to monitor Cloudwatch agent</title><link href="/posts/Create-a-systemd-service-to-monitor-Cloudwatch-agent/" rel="alternate" type="text/html" title="Create a systemd service to monitor Cloudwatch agent" /><published>2022-10-21T21:30:00+00:00</published> <updated>2022-10-21T21:30:00+00:00</updated> <id>/posts/Create-a-systemd-service-to-monitor-Cloudwatch-agent/</id> <content src="/posts/Create-a-systemd-service-to-monitor-Cloudwatch-agent/" /> <author> <name>Sam</name> </author> <category term="aws" /> <category term="howto's" /> <category term="linux" /> <category term="cloudwatch" /> <category term="cloud" /> <summary> The problem to solve If you are monitoring an AWS instance that is busy and has other programs accessing the same logs as the Cloudwatch agent then you may run into this error in the agents logs “too many open files” which stops any further information or metrics being sent to Cloudwatch. Not a huge problem, but what happens when everyone has gone home and know one is there to restarts the age... </summary> </entry> </feed>
